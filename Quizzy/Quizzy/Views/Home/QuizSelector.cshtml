@{
    ViewData["Title"] = "Quiz Selector";
}

<div class="text-center">
    <div class="d-inline-block">
        <input class="user-options" type="text" placeholder="Search Quizzes" />
        <a>Only show your quizzes: </a>
        <input class="user-options" type="checkbox" placeholder="Search All Quizzes" />
        <button id="search-button" class="btn btn-primary user-options">Search Quizzes</button>
    </div>
    <div id="quizes-container"></div>
</div>

<script type="module">
    import { localStorageKeys, GetFromLocalStorage } from '/js/utils.js';

    let quizzes = [];

    function renderQuizzes() {
        const container = document.getElementById('quizes-container');
		const userId = GetFromLocalStorage(localStorageKeys.UserId);
        if (!Array.isArray(quizzes)) quizzes = [];
        let html = '';
        quizzes.forEach((quiz) => {
            let editButton = '';
            if (quiz.authorId == userId) editButton = `<a href="@Url.Content("~/Home/CreateQuiz")?id=${encodeURIComponent(quiz.id)}" class="btn btn-secondary">Edit Quiz</a>`;
            html += `
            <div class="card-body mb-3" style="width: 18rem; display: inline-block; margin: 0.5rem;">
                <h5 class="card-title">${quiz.name ?? 'Untitled'}</h5>
                <div>By ${quiz.authorName ?? 'Unknown'} - ${quiz.questionsNum ?? 0} questions long</div>
                <div class="inline-block">
					${editButton}
                    <button class="btn btn-primary start-session-btn" data-id="${quiz.id}">Start Session</button>
                </div>
            </div>`;
        });

        container.innerHTML = html || "<h3>No quizzes found</h3>";

        container.querySelectorAll('.start-session-btn').forEach(btn => {
            btn.addEventListener('click', () => joinGame(btn.dataset.id));
        });
    }

    function joinGame(quizId) {
        console.log(`Joining game ${quizId}`);
    }

    document.getElementById('search-button').addEventListener('click', () => {
        const searchText = getSearchText();
        if (isSearchingOnlyOwn()) {
            if (searchText) searchMyQuizzes(searchText);
            else getMyQuizzes();
        } else {
            if (searchText) searchQuizzes(searchText);
            else getAllQuizzes();
        }
    });

    function isSearchingOnlyOwn() {
        const checkbox = document.querySelector('.user-options[type="checkbox"]');
        return checkbox?.checked ?? false;
    }

    function getSearchText() {
        const input = document.querySelector('.user-options[type="text"]');
        return input?.value ?? '';
    }

    function getAllQuizzes() {
        fetch('@Url.Content("~/QuizSelector/GetAll")')
            .then(response => response.json())
            .then(data => { quizzes = data; renderQuizzes(); })
            .catch(error => console.error('Error fetching quizzes:', error));
    }

    function getMyQuizzes() {
        const userId = GetFromLocalStorage(localStorageKeys.UserId);
        fetch(`@Url.Content("~/QuizSelector/GetAllById")?id=${encodeURIComponent(userId ?? '')}`)
            .then(response => response.json())
            .then(data => { quizzes = data; renderQuizzes(); })
            .catch(error => console.error('Error fetching quizzes:', error));
    }

    function searchQuizzes(text) {
        fetch(`@Url.Content("~/QuizSelector/GetAllByName")?name=${encodeURIComponent(text)}`)
            .then(response => response.json())
            .then(data => { quizzes = data; renderQuizzes(); })
            .catch(error => console.error('Error fetching quizzes:', error));
    }

    function searchMyQuizzes(text) {
        const userId = GetFromLocalStorage(localStorageKeys.UserId);
        fetch(`@Url.Content("~/QuizSelector/GetAllByIdAndName")?id=${encodeURIComponent(userId ?? '')}&name=${encodeURIComponent(text)}`)
            .then(response => response.json())
            .then(data => { quizzes = data; renderQuizzes(); })
            .catch(error => console.error('Error fetching quizzes:', error));
    }

    getAllQuizzes();
</script>

<style>
    .user-options {
        width: auto;
        min-width: 0;
        padding: 0.375rem 0.75rem;
        margin: 0 0.25rem 0.5rem 0.25rem 0.25rem;
        box-sizing: border-box;
        text-align: center;
        white-space: nowrap;
    }

    .btn {
        display: inline-block;
    }
</style>